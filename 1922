#include <stdio.h>
#include <string.h>
#define max_elements 100001
int root[1001];
typedef struct element_t {
	int v;
	int w;
	int cost;
}element;

typedef struct heap_t {
	element heap[max_elements];
	int heap_size;
}heap;

heap heap1; // 힙의 생성

void insert_min_heap(heap* h, element item){ // 가중치를 기준으로 min heap을 이용해 pq를 구현
	int i;
	i = ++(h->heap_size);

	while ((i != 1) && (item.cost < h->heap[i / 2].cost)) {
		h->heap[i] = h->heap[i / 2];
		i /= 2;
	}
	h->heap[i] = item;
}

element delete_min_heap(heap* h) {
	int parent, child;
	element item, temp;

	item = h->heap[1];
	temp = h->heap[(h->heap_size)--]; 
	parent = 1;
	child = 2;
	while (child <= h->heap_size) {
		if ((child < h->heap_size) && ((h->heap[child].cost) > h->heap[child + 1].cost)) child++;
		if (temp.cost <= h->heap[child].cost) break;

		h->heap[parent] = h->heap[child];
		parent = child;
		child *= 2;
	}
	h->heap[parent] = temp;
	return item;
}

int find(int n) {
	if (root[n] < 0) return n;
	else return root[n] = find(root[n]);
}

void Union(int a, int b) {
	int rta = find(a);
	int rtb = find(b);
	root[rta] = rtb; // b에다가 a붙이기
}
int main(void) {
	memset(root, -1, sizeof(root));
	int ans = 0; // 가중치의 합(=답)이 저장될 변수
	int cnt = 0; // 몇 개의 간선이 선택되었나
	int n, m;
	element tmp;
	scanf("%d %d", &n, &m);
	for (int i = 0; i < m; i++) {
		scanf("%d %d %d", &tmp.v, &tmp.w, &tmp.cost);
		if (tmp.v == tmp.w) continue; // 같은 경우 (자기 자신->자기 자신으로 향하는 간선) 필요x
		insert_min_heap(&heap1, tmp);
	}
	while(cnt<=n-1&&heap1.heap_size!=0){ // n-1개 이하의 간선이 선택되었고 && heap이 비어있지 않음
		tmp = delete_min_heap(&heap1);
		if (find(tmp.v) != find(tmp.w)) { // 서로소라면
			Union(tmp.v, tmp.w); // v,w 연결
			ans += tmp.cost; // E(v,w)의 cost
			cnt++;	// 간선의 개수 1증가했으니
		}
		else { // 서로소가 아니면
			continue;
		}
	}
	printf("%d", ans);
	return 0;

}
