#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
using namespace std;

vector<int> makeTable(string pattern) {
	int patternSize = pattern.size();

	//table은 접두사와 접미사가 일치하는 최대 길이를 저장
	// pattern size만큼 0으로 테이블 초기화
	vector<int> table(patternSize, 0);

	int j = 0;
	for (int i = 1; i < patternSize; i++) {
		while (j > 0 && pattern[i] != pattern[j]) { // 접미사와 같은 원소를 가진 접두사를 찾을때까지 j를 앞으로 계속 이동시킴. i그대로
			j = table[j - 1];
		}
		if (pattern[i] == pattern[j]) { 
			table[i] = ++j;
		}
	}
	return table;
}

vector<int> KMP(string parent, string pattern) {
	vector<int> ans;
	vector<int> table = makeTable(pattern);
	int parentSize = parent.size();
	int patternSize = pattern.size();
	int j = 0;
	for (int i = 0; i < parentSize; i++) {
		while (j > 0 && parent[i] != pattern[j]) {
			j = table[j - 1];
		}
		if (parent[i] == pattern[j]) {
			if (j == patternSize - 1) {
				ans.push_back(i - patternSize + 1);
				j = table[j];
			}
			else j++;
		}

	}
	return ans;
}

int main(void) {

	string t, p;
	getline(cin, t);
	getline(cin, p);
	vector<int> table = makeTable(p);
	/*for (int i = 0; i < table.size(); i++) {
		printf("%d ", table[i]);
	}
	printf("\n");
	*/
	auto matched = KMP(t, p);
	printf("%d\n", matched.size());
	for (auto index : matched)
		cout << index + 1 << ' ';
	cout << endl;
	return 0;

}
